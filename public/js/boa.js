"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};function getBoa(){var t=document.getElementById("boa"),e=document.createElement("div");e.style.backgroundColor="Black",e.style.width="100px",e.style.height="100px",t.appendChild(e)}document.addEventListener("DOMContentLoaded",function(t){Window.document;getBoa()});var boa={constructor:function(t,e){if(console.log(validate([t,"string"],[e,"string"])),validate([t,"string"],[e,"string"])){var o=createHTMLTag(t),n=identifyAttr(e,regexes);console.log(n),Object.keys(n).forEach(function(t){o.setAttribute(t,n[t])}),console.log(o)}}};function validate(){for(var t=arguments.length,e=Array(t),o=0;o<t;o++)e[o]=arguments[o];e.length;var n=e.filter(function(t){return _typeof(t[0])!=t[1]});if(0===n.length)return!0;errorLog("Error: Arguments given to constructor must be strings \n\n"+n[0][0]+" is not a "+n[0][0])}function errorLog(t){return console.log(t)}function createHTMLTag(t){return document.createElement(t)}function identifyAttr(t,e){var o={},n=e.attrRegex;if(n.test(t))for(var r=void(n.lastIndex=0);null!==(r=n.exec(t));)o[r[2]]=r[3];else o=!1;return console.log(o),o}var regexes={attrRegex:RegExp(/(([\w\-]+)(?:= ?)([\w\-\.\/\:\; ]+)(?:|))/,"g")};identifyAttr("class=test biggerTest class-names-snaked| id=uniqueID| src=..path/o/to|",regexes),boa.constructor("div","class=ThisIsAclass this-another-class| id=iIF|");